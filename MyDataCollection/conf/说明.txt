
1、创建web项目
2、创建包结构
	com.my.ssh.action
	com.my.ssh.service
	com.my.ssh.service.impl
	com.my.ssh.dao
	com.my.ssh.dao.impl
	com.my.ssh.model
	com.my.ssh.util
	
3、引入类库：
	[struts2]
		asm-3.3.jar
		asm-commons-3.3.jar
		asm-tree-3.3.jar
		commons-fileupload-1.3.2.jar
		commons-io-2.2.jar
		commons-lang3-3.2.jar
		freemarker-2.3.22.jar
		javassist-3.11.0.GA.jar
		log4j-api-2.3.jar
		log4j-core-2.3.jar
		ognl-3.0.19.jar
		struts2-core-2.3.30.jar
		xwork-core-2.3.30.jar
		
	[hibernate]
		antlr-2.7.7.jar
		dom4j-1.6.1.jar
		hibernate-commons-annotations-4.0.2.Final.jar
		hibernate-core-4.2.4.Final.jar
		hibernate-jpa-2.0-api-1.0.1.Final.jar
		javassist-3.15.0-GA.jar  ------- 删除重复的包
		hibernate-entitymanager-4.2.4.Final.jar  -- 在jpa目录下
		
	[spring]
		spring-aop-4.3.2.RELEASE.jar
		spring-aspects-4.3.2.RELEASE.jar
		spring-beans-4.3.2.RELEASE.jar
		spring-context-4.3.2.RELEASE.jar
		spring-core-4.3.2.RELEASE.jar
		spring-expression-4.3.2.RELEASE.jar
		spring-jdbc-4.3.2.RELEASE.jar
		spring-orm-4.3.2.RELEASE.jar
		spring-tx-4.3.2.RELEASE.jar
		spring-web-4.3.2.RELEASE.jar
		spring-webmvc-4.3.2.RELEASE.jar
		
		aspectjweaver-1.6.6.jar
		com.springsource.org.aopalliance-1.0.0.jar
		commons-logging-1.1.3.jar
		cglib-nodep-2.2.2.jar
		
	[struts2-spring插件]
		struts2-spring-plugin-2.3.30.jar
		
	[数据源]
		c3p0-0.9.1.2.jar
		
	[驱动程序]
		mysql-connector-java-5.1.39-bin.jar	

3、配置项目
	[struts2 + web]
	
	
	
	
	
4、MD5加密

	字符串 ----> 字节数组 ----> MD5加密转为16位字节；
	
	
5、功能性需求：
================
 到达注册页面:
	1.导航栏 --> 用户注册选择;
	2. 进入RegAction.toRegPage()方法
		public String toRegPage()
		{
			return "regPage";
		}	
	3. struts.xml文件
		<action name="RegAction_*" class="regAction" method="{1}">
			<result name="regPage">/reg.jsp</result>
		</action>
	4. 跳转到/reg.jsp页面
		<s:form>
			<s:textfield name="email" label="Email"/>
			...
		</s:form>
	
===================
进行用户注册：
1.注册页面  ---> 提交表单
2、RegAction.doReg()方法：
	public String doReg()
	{
		1、接收用户信息 --- model;
		2、userService.saveEntity(model);
		3、return "success";
	}
	
===================
进入登录页面：
1、导航栏 ---> [首页]
2、LoginAction.toLoginPage()方法;
	public String toLoginPage()
	{
		return "loginPage";
	}
3、struts.xml配置action
	<action name="LoginAction" class="loginAction">
		<result name="loginPage">/index.jsp</result>
		<result name="input">/index.jsp</result>
	</action>
4、跳转到/index.jsp
	
=======================
登录验证：
1.登录页面的提交
2.LoginAction.doLogin()方法:
	public String doLogin()
	{
		return "success";
	}
	
	public void validate()
	{
		1、验证登录信息;
			User user = userService.validateLoginInfo(model.getEmail(), DataUtil.md5(model.getPassword()));
			public User validateLoginInfo(String email, String md5)
			{
				String hql = "from User u where u.email = ? and u.password = ?";
				List<User> list = this.findEntityByHQL(hql, email, md5);
				return ValidateUtil.isValid(list) ? list.get(0) : null;
			}
		2、失败/成功  ---> index.jsp;
		3、成功：将user存入到session中;
	}
3.struts.xml配置
	<action ...>
		<result name="success">/index.jsp</result>
	</action>

================================================
查看我的调查列表:
1.导航栏 ----> [我的调查]
2.SurveyAction.mySurveys()方法:
	public String mySurveys()
	{
		1、从session获取user对象;
		2、调用service查询用户对应的调查:
			this.mySurveys = surveyService.findMySurveys(user);
			public List<Survey> findMySurveys(User user)
			{
				String hql = "from Survey s where s.user.id = ?";
				return surveyDao.findEntityByHQL(hql, user.getId());
			}
		3、return "mySurveyListPage";
	}
3.struts.xml配置
	<action ..
4.跳转到/mySurveyList.jsp
	<s:iterator value="mySurveys" var="mySur">
		<s:property value="mySur.id"/>
		<s:property value="mySur.title"/>
		<s:date name="mySur.createTime" format="yyyy-MM-dd hh:mm" />
		...
	</s:iterator>

=======================================
新建调查:
1.导航栏 ---> [新建调查]
2.SurveyAction.newSurvey():
	public String newSurvey()
	{
		1、从session中获取user;
		2、this.model = surveyService.newSurvey(user);// model回显
			public Survey newSurvey(User user)
			{
				Survey s = new Survey();
				Page p = new Page();
				//双向关联的
				p.setSurvey(s);	
				s.getPages().add(p);
				//先保存调查再存页面
				surveyDao.saveEntity(s);
				pageDao.saveEntity(p);
				retutn s;
			}
		3、return "designSurveyPage";
	}
3.struts.xml配置文件:
	<result name="designSurveyPage">/designSurvey.jsp</result>
	
4.跳转到/designSurvey.jsp页面;


=====================================
登录拦截器(自定义拦截器)





































