面向对象的贪吃蛇

1、找类和对象
	a.Snake 	蛇类
	b.Food  	食物类
	c.Ground 	障碍物类
	d.GamePanel	面板类（显示蛇、食物、障碍物）

2、找类的方法
	2.1 Snake类
	    move(); //移动;
	    eatFood(Food food); //吃食物；
	    changeDirection();  //改变方向
	    drawMe();				//画自己
	    isEatSelf();  		//蛇是否碰到自己
	    
	2.2 Food类
		drawMe();
	 	isEatBySnake(); 蛇是否碰到食物，

	2.3 Ground类
		drawMe();
		isEatBySnake(); 蛇是否碰到障碍物;
		
	2.4 GamePanel类        显示蛇、食物、障碍物
		display()
		重写paintComponent方法
	
3、控制器Controller
	3.1 其实贪吃蛇游戏就是控制Snake, Food, Ground, GamePanel;
	    专门用控制器来控制这四个对象 ---> 作为成员并通过构造函数初始化;
	    
	3.2 控制器要能够控制蛇的移动主要是方向的改变
		我们在操作的时候是通过键盘事件来控制,键盘事件由键盘监听控制,
		那么我们的控制器首先需要是键盘的监听器,
		所以我们让Controller继承KeyAdapter重写keyPressed方法
		
	3.3  蛇每次移动都应该判断蛇是否碰到了自己、障碍物、食物等；
		写一个监听器来监听蛇是否碰到了自己、障碍物、食物;
		写一个接口SnakeListener;
		
		蛇需要有添加这个监听器的方法，接收这个监听器的成员；
		（给Snake类添加成员和方法）
	
	3.4 控制器也要是蛇的监听器，能够监听蛇是否碰到自己、食物、障碍物；
	        所以让Controller实现该接口；

4、组装游戏
	4.1 创建所有类的对象
	
	4.2 控制器也应该控制游戏的开始，Controller添加startGame()方法;
	
	4.3 在Snake类中添加start方法来启动蛇的移动;
		start方法的实现启动一个线程让蛇不停的移动
		
	4.4 创建一个线程SnakeDriver
	
	4.5 给蛇/面板添加键盘事件监听器
	
	4.6 创建窗体，添加面板，启动游戏，显示界面

总结：通过前面的4步，架子已经搭建好了，面向对象的设计已经完成；
	采用的mvc方案，接下来具体实现；

5、具体实现
	5.1用什么数据结构存储蛇身;
	   snake最重要的动作是蛇的移动;
	       蛇（去尾加头的模式）,数据结构选择LinkedList;
	       LinkedList容纳什么，矩形还是点？(蛇头经过的地方，蛇身都会经过)
		我们用Point(矩形的左上角坐标，每个方块的宽度、高度固定)
		将来也方便判断是否碰到食物、障碍物、自己；
	5.2  贪吃蛇完后，蛇身就是几个方块组成的，我们可以直接吧面板划分为行列的格子组成;
		定义辅助类Global
		
		(x,y)  ---> (x*格子宽度, y*格子的高度)

	5.3 初始化的蛇身
		格子中间开始向三个格子作为出事蛇身;
		
	5.4 完成蛇的移动move()方法
		去尾巴加头的方式；
		去完成方向的操作；
		修正反方向的操作；
		边界问题（穿透）；
	5.5 完成食物的操作
		食物就是一个格子，格子的宽度和高度已经定义完成；
		这样的话就由左上角坐标决定，可以让食物直接集成Point类；
		设置食物出现的位置；
		对控制器而言，游戏开始时，不但要有蛇的移动还出现食物；
		
		吃食物：只要把去掉的尾巴加回来即可；
	5.6完成障碍物的绘制


