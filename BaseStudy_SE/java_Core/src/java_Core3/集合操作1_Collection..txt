
集合操作(java.util.*)

java.util.Collection
		|____ java.util.List
		|			|______ java.util.ArrayList(Vector)
		|			|______ java.util.LinkedList
		|____ java.util.Set (不能放重复的对象，是否重由equals决定);
		
		
		

1、java.util.ArrayList
	1.1基本的使用
		list.add(pro1); //添加元素
		System.out.println(list);//打印容器对象，打印容器容纳的每个元素的toString
		System.out.println(list.size());//获取容器的有效元素个数
		Product p1 = (Product)list.get(2);//获取容器中的耨个元素
		
	1.2 迭代器的遍历
		 如果有一个聚集，就应该提供访问聚集中某个元素和遍历所有元素的方式
		 迭代器设计模式，java.util.Iterator
		 Iterator itor = list.iterator();
		 while(itor.hasNext()){
			Product p3 = (Product)itor.next();
			System.out.println(p3);
		 }
		 
		//判断某元素是否包含在集合中   --> true
		list.contains(product1);
		
	1.3 集合中泛型的使用
		
		注意：泛型只是在编译阶段有这个，防止错误输入；如果绕过编译就可以绕过泛型；
		           反射都是绕过编译操作的，因为反射读取的是字节码；
		
	1.4 ArrayList的源代码
		底层是数组（在电影租赁的项目中已经模拟过）;
		重要的成员：Object[] elementData;
				 int size; 有效元素的元素
				  扩容、移位的操作；
				 移除元素要做前移操作；
		注意：ArrayList这种数组作为底层的操作；
			最好估算元素的多少来指定底层数组的大小；
			ArrayList list = new ArrayList(大小给定)来避免扩容；
			因为扩容会产生垃圾，占用内存，性能就会变差；
	1.5 java.util.Vector
		底层也是数组的操作，所以大部分的功能和ArrayList一样；
		遍历中有一种古老的遍历方式Enumeration,ArrayList存在的遍历方式也都有；
		ArrayList是线程不安全的，Vector是线程安全的；
		jdk7之前的版本，扩容方式稍有差异；

		
2、java.util.LinkedList (链表结构)
	2.1 基本使用和ArrayList相似;
		提供了更为丰富的头尾操作;
		addFirst 、 addLast、 getFirst、 getLast；
	2.2 头尾操作较多的常用适合使用LinkedList；
		比如贪吃蛇的操作，去尾加头的方式；
		案例：Node、Worm、WormPanel、WormTest；
		
	2.3 数据结构 (链表 ---> 双向链表)
	        内容包含一个静态类NOde
	        		  Object object
	        		  Node next
	        		  Node pre
	        		  
3.java.util.HashSet
	3.1  底层是HashSet
	
	
	
	
4.java.util.TreeSet
	TreeSet容纳的对象必须要能够排序(排序的方式由自己来定义)；
	两种排序的比较器:
	4.1 java.lang.Comparable
		TreeSet使用无参的构造函数，必须要实现Comparable的接口；
	4.2 java.util.Comparator
		TreeSet构造的时候使用Comparator作为构造函数的参数;
	
	
	
	
		